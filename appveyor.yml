version: Build-{build}
branches:
  only:
  - develop
  - master
environment:
  packageVersion: NotSet
  packageName: autofac.typedfactories
  assemblyInfoPath: C:\projects\autofac-typedfactories\src\Autofac.TypedFactories\Properties\AssemblyInfo.cs
  repoNuGet: https://www.nuget.org/api/v2
before_build:
- nuget restore -verbosity detailed -source "https://www.nuget.org/api/v2" "./src/Autofac.TypedFactories.sln"
- ps: "$assemblyInfoPath = $env:assemblyInfoPath\n$packageName = $env:packageName\n$branchName = $env:APPVEYOR_REPO_BRANCH\n$repoNuGet = $env:repoNuGet\n\n# Get AssemblyInfo version\n$assemblyInfoVersion = Select-String -Path $assemblyInfoPath -Pattern 'AssemblyInformationalVersion\\(\"([0-9]*).([0-9]*).([0-9]*)(.*?)\"\\)'  | % { $_.Matches }\n$assemblyInfoVersion_major = $assemblyInfoVersion.Groups[1].Value\n$assemblyInfoVersion_minor = $assemblyInfoVersion.Groups[2].Value\n$assemblyInfoVersion_patch = $assemblyInfoVersion.Groups[3].Value\n\n# Get all available package versions\n$packageVersions = src\\.nuget\\NuGet.exe list $packageName -prerelease -source $repoNuGet -allversions\n\n# Get the matching version\n$filteredVersions = $packageVersions | Select-String -Pattern \"$($assemblyInfoVersion_major).$($assemblyInfoVersion_minor).$($assemblyInfoVersion_patch)-[bB]eta([0-9]*)\" -AllMatches | % { $_.Matches }\nif($branchName -eq \"master\")\n{\n     $nextVersion = $assemblyInfoVersion_major + \".\" + $assemblyInfoVersion_minor + \".\" + $assemblyInfoVersion_patch\n}\nelse \n{\n    if($filteredVersions.Length -eq 0) {\n	\n	    $nextVersion = $assemblyInfoVersion_major + \".\" + $assemblyInfoVersion_minor + \".\" + $assemblyInfoVersion_patch + \"-Beta01\"\n	\n    } else {\n\n	    # Get last version available\n	    $lastVersion = $filteredVersions | Sort-Object -Property Groups[1] -desc | Select-Object -first 1 | % { $_.Value }\n	\n	    # Get next beta available\n	    $semanticVersion    = $lastVersion | Select-String -Pattern \"([0-9]*).([0-9]*).([0-9]*)-[bB]eta([0-9]*)\" | % { $_.Matches }\n	    $nextBeta = ([int]$semanticVersion.Groups[4].Value + 1).ToString(\"00\")\n\n	    # Set the next version\n	    $nextVersion = $assemblyInfoVersion_major + \".\" + $assemblyInfoVersion_minor + \".\" + $assemblyInfoVersion_patch + \"-Beta\" + $nextBeta\n	\n    }\n}\n\n# Replace AssemblyInfo.cs with the newer version ($nextVersion)\n[IO.File]::WriteAllLines($assemblyInfoPath, ((Get-Content $assemblyInfoPath) | ForEach-Object { $_ -replace 'AssemblyInformationalVersion\\(\"([0-9]*).([0-9]*).([0-9]*)(.*?)\"\\)', \"AssemblyInformationalVersion(\"\"$nextVersion\"\")\" }))"
build:
  verbosity: minimal
after_build:
- cmd: nuget pack %APPVEYOR_BUILD_FOLDER%\src\Autofac.TypedFactories\Autofac.TypedFactories.csproj
- cmd: nuget pack %APPVEYOR_BUILD_FOLDER%\src\Autofac.TypedFactories\Autofac.TypedFactories.csproj -symbols
artifacts:
- path: '**/Autofac.TypedFactories.*.nupkg'
  name: NuGet_pkg
deploy:
- provider: NuGet
  server: https://www.nuget.org/api/v2/package
  artifact: NuGet_pkg
  api_key:
    secure: 4wZX/8xmg2FhrYoFP9NoSOKSGEURiqlH3li5G3aBkkbnILsSw23jrcnCfZMcyoRn
  on:
    branch: Never
- provider: NuGet
  server: https://www.nuget.org/api/v2/package
  artifact: NuGet_pkg
  api_key:
    secure: 4wZX/8xmg2FhrYoFP9NoSOKSGEURiqlH3li5G3aBkkbnILsSw23jrcnCfZMcyoRn
  on:
    branch: Never
  